from flask import Flask, render_template
from models2 import db, User, Recipes, Article
from routes2_users import users_bp
from routes2_recipes import recipes_bp
from routes2_calorie import calorie_bp
from routes2_ingredient import ingredient_bp
from dotenv import load_dotenv
from flask_login import LoginManager
from flask_cors import CORS
import os
from flask_session import Session  # 用於設置驗證碼
from flask_migrate import Migrate  # 確保 Flask-Migrate 已導入

load_dotenv()  # 加载.env文件

app = Flask(__name__)  # 创建Flask应用

# 在Docker环境中简化CORS配置
if os.environ.get('DOCKER_ENV') == 'true':
    # Docker环境中通过Nginx代理，不需要复杂的CORS
    CORS(app, supports_credentials=True)
else:
    # 开发环境中更严格的CORS设置
    CORS(app, resources={r"/*": {
        "origins": [
            "http://localhost:3000",
            "http://localhost:8080",
            "http://localhost"
        ],
        "supports_credentials": True
    }})

# 安全配置
app.config['SECRET_KEY'] = os.getenv('SECRET_KEY')
app.config['SQLALCHEMY_DATABASE_URI'] = os.getenv('DATABASE_URL')
if not app.config['SQLALCHEMY_DATABASE_URI']:
    raise RuntimeError("DATABASE_URL is not set in the environment variables.")
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
app.config['SESSION_COOKIE_SECURE'] = os.environ.get('FLASK_ENV') == 'production'
app.config['SESSION_COOKIE_HTTPONLY'] = True
app.config['SESSION_COOKIE_SAMESITE'] = 'Lax'

# 會話配置
app.config['SESSION_TYPE'] = 'filesystem'
app.config['SESSION_PERMANENT'] = False
app.config['SESSION_USE_SIGNER'] = True
app.config["SESSION_FILE_DIR"] = "./flask_session_cache"

# 确保session目录存在
os.makedirs("./flask_session_cache", exist_ok=True)

Session(app)

db.init_app(app)  # 初始化数据库
migrate = Migrate(app, db)  # 初始化 Flask-Migrate

# 注册蓝图
app.register_blueprint(users_bp, url_prefix='/users')
app.register_blueprint(recipes_bp, url_prefix='/recipes')
app.register_blueprint(calorie_bp, url_prefix='/calorie')
app.register_blueprint(ingredient_bp, url_prefix='/ingredient')

# 登录管理
login_manager = LoginManager()
login_manager.init_app(app)
login_manager.login_view = 'users.login'

with app.app_context():
    db.create_all()  # 创建所有表

@login_manager.user_loader
def load_user(user_id):
    return User.query.get(int(user_id))

if __name__ == '__main__':
    # 在Docker中绑定到所有网络接口
    host = '0.0.0.0' if os.environ.get('DOCKER_ENV') == 'true' else '127.0.0.1'
    app.run(debug=os.environ.get('FLASK_ENV') == 'development', host=host)