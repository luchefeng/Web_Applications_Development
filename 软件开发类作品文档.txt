第二章 概要设计

系统架构采用前后端分离设计，主要分为以下功能模块：

1. 用户认证模块
   - 注册（支持版本选择）
   - 登录（验证码校验）
   - 会话管理

2. 食材管理模块
   - 食材库存管理
   - 保质期提醒
   - 营养成分展示

3. 卡路里管理模块
   - 每日摄入记录
   - 卡路里计算
   - 健康建议生成

4. 菜谱管理模块
   - 个性化推荐
   - 菜谱浏览/搜索
   - 基于食材的智能匹配

模块调用关系：
- 用户认证模块为基础模块，其他所有模块都依赖于它
- 食材管理模块与卡路里管理模块相互配合
- 菜谱管理模块依赖于食材管理模块的数据

第三章 详细设计

1. 界面设计
主要界面包括：
- 首页（版本选择）
- 登录/注册界面
- 仪表盘（根据版本不同展示不同布局）
- 食材管理界面
- 卡路里记录界面
- 菜谱推荐界面

2. 数据库设计
主要数据表：
a) 用户表（users）
   - id: 主键
   - username: 用户名
   - email: 邮箱
   - password_hash: 密码哈希
   - calorie_version: 版本标志

b) 食材表（ingredients）
   - id: 主键
   - name: 食材名
   - category: 类别
   - calories: 卡路里
   - expiry_date: 保质期
   - user_id: 外键

c) 卡路里记录表（calorie_records）
   - id: 主键
   - user_id: 用户ID
   - date: 记录日期
   - amount: 摄入量
   - ingredient_id: 食材ID

3. 关键技术
- Vue3 Composition API的组件化开发
- Flask-SQLAlchemy的ORM模型设计
- JWT的用户认证机制
- 基于用户行为的推荐算法

第四章 测试报告

1. 功能测试
- 用户注册登录流程测试
- 食材管理CRUD操作测试
- 卡路里计算准确性测试
- 推荐系统效果测试

2. 性能测试
- 页面加载时间：平均<2s
- 数据库查询响应：平均<100ms
- 并发用户支持：>100

3. 安全性测试
- SQL注入防护
- XSS攻击防护
- CSRF防护
- 密码加密存储

第五章 安装及使用

1. 环境要求
- Node.js >= 14.0.0
- Python >= 3.8
- MySQL >= 5.7

2. 安装步骤
前端：
